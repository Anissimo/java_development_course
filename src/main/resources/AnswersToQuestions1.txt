1. Три принципа ООП.
- Инкапсуляция: Скрытие внутренней реализации объекта и предоставление публичного интерфейса для взаимодействия с ним.
- Наследование: Создание нового класса на основе существующего класса, что позволяет повторно использовать код и расширять функциональность.
- Полиморфизм: Возможность использовать объекты разных классов через общий интерфейс, что позволяет объектам разных типов обрабатывать сообщения одним и тем же способом.

2. Классы и объекты. Свойства объектов.
- Классы: Шаблоны или модели, которые описывают структуру и поведение объектов.
- Объекты: Экземпляры классов, которые содержат конкретные данные и могут выполнять действия, определенные классом.
- Свойства объектов: Переменные или данные, которые хранят состояние объекта.

3. Члены класса. Модификаторы объявления класса.
- Члены класса: Поля и методы, которые описывают состояние и поведение объекта.
- Модификаторы объявления класса:
  - "public": Класс доступен из других пакетов.
  - "protected": Класс доступен в пределах своего пакета и подклассов.
  - "private": Класс доступен только внутри своего класса (не применяется к классу, только к его членам).

4. Пакеты.
- Пакеты в Java используются для группировки связанных классов, интерфейсов и под-пакетов, что помогает организовать код и управлять областью видимости классов.

5. Пространства имен.
- Пространства имен (или пакеты) помогают организовать классы и избегать конфликтов имен между классами из разных библиотек или частей проекта.

6. Модуль компиляции.
- Модуль компиляции включает в себя все классы и файлы исходного кода, которые компилируются вместе, создавая один модуль.

7. Поля.
- Поля — это переменные, объявленные внутри класса, которые хранят данные или состояние объектов класса.

8. Методы. Метод main.
- Методы: Функции, определенные в классе, которые описывают поведение объекта.
- Метод main: Основной метод, с которого начинается выполнение Java-программы. Он имеет сигнатуру "public static void main(String[] args)".

9. Модификаторы доступа.
- Модификаторы доступа управляют видимостью членов класса:
  - "public": Доступен из любого места.
  - "protected": Доступен в пределах того же пакета и для подклассов.
  - "default" (без модификатора): Доступен только в пределах того же пакета.
  - "private": Доступен только внутри своего класса.

10. Создание объектов. Конструкторы.
- Создание объектов: Использование оператора "new" для создания экземпляров класса.
- Конструкторы: Специальные методы, которые вызываются при создании объекта и инициализируют его.

11. Блоки инициализации. Статическая инициализация.
- Блоки инициализации: Код, который выполняется при создании объекта или при загрузке класса, но не является методом или конструктором.
- Статическая инициализация: Инициализация, которая выполняется один раз при загрузке класса, с помощью статических блоков.

12. Простые типы. Массивы.
- Простые типы: Основные типы данных, такие как "int", "float", "char", "boolean".
- Массивы: Коллекции элементов одного типа, доступные по индексу.

13. Исключения. Родительский класс исключений. Выбрасывание исключений.
- Исключения: Ошибки или неожиданные события, которые происходят во время выполнения программы.
- Родительский класс исключений: Класс "Throwable", от которого наследуются все исключения в Java.
- Выбрасывание исключений: Использование ключевого слова "throw" для генерации исключения в коде.

14. Объявляемые и необъявляемые исключения. Пример.
- Объявляемые исключения: Исключения, которые необходимо явно обработать или объявить в сигнатуре метода с помощью "throws". Например, "IOException".
- Необъявляемые исключения: Исключения, которые не требуют явного объявления или обработки. Например, "NullPointerException".

15. Синхронные и асинхронные исключения. Пример.
- Синхронные исключения: Исключения, возникающие в основном потоке выполнения, такие как "ArithmeticException".
- Асинхронные исключения: Исключения, возникающие в результате выполнения многопоточных задач, такие как "InterruptedException".

16. Предложение throws.
- throws: Ключевое слово, используемое в сигнатуре метода для указания, что метод может выбрасывать определённые исключения, которые вызывающий метод должен обработать или объявить.

17. try, catch и finally.
- try: Блок, в котором выполняется код, который может вызвать исключение.
- catch: Блок, который перехватывает и обрабатывает исключения, выброшенные в блоке "try".
- finally: Блок, который выполняется независимо от того, произошло исключение или нет, часто используется для освобождения ресурсов.

18. Интерфейсы. Модификаторы в объявлениях интерфейсов. Пример простого интерфейса.
- Интерфейсы: Контракты, которые определяют методы, которые должны быть реализованы классами. Интерфейсы могут содержать только абстрактные методы и константы.
- Модификаторы в объявлениях интерфейсов: "public" и "default".
- Пример простого интерфейса: Интерфейс с методами, которые должны быть реализованы классами, реализующими этот интерфейс.

19. Объявление интерфейса. Константы и методы в интерфейсах.
- Объявление интерфейса: Использование ключевого слова "interface" для определения интерфейса.
- Константы: Параметры в интерфейсе по умолчанию являются "public static final".
- Методы: Методы в интерфейсе по умолчанию являются "public abstract".

20. Расширение интерфейсов. Наследование и сокрытие констант. Наследование, переопределение и перегрузка методов.
- Расширение интерфейсов: Интерфейс может расширять один или несколько других интерфейсов, добавляя новые методы.
- Наследование и сокрытие констант: Интерфейсы могут наследовать константы и методы от других интерфейсов, но не могут изменять их значения.
- Наследование, переопределение и перегрузка методов:
  - Наследование: Классы могут наследовать методы от суперкласса.
  - Переопределение: Классы могут переопределять методы суперкласса, предоставляя свою реализацию.
  - Перегрузка: Классы могут создавать несколько методов с одинаковым именем, но с разными параметрами.

21. Пустые интерфейсы. Пример.
- Пустые интерфейсы: Интерфейсы без методов, используемые для маркировки или обозначения типа. Например, интерфейс "Serializable".

22. Отличия абстрактного класса от интерфейса.
- Абстрактный класс: Может содержать как абстрактные, так и конкретные методы. Позволяет иметь состояние (поля). Класс может наследоваться только от одного абстрактного класса.
- Интерфейс: Содержит только абстрактные методы (до Java 8) и константы. Один класс может реализовать несколько интерфейсов.