1. Потоки данных. Байтовые потоки. Базовые абстрактные классы байтовых потоков.
   - Потоки данных используются для передачи данных между программой и внешними источниками/получателями данных. Байтовые потоки работают с данными в виде байтов (8-битных единиц).
   - Основные абстрактные классы байтовых потоков:
     - "InputStream" — базовый класс для всех классов, которые работают с чтением байтов.
     - "OutputStream" — базовый класс для всех классов, которые работают с записью байтов.

2. Символьные потоки. Базовые абстрактные классы символьных потоков.
   - Символьные потоки работают с данными в виде символов (16-битные единицы), что позволяет обрабатывать текстовые данные.
   - Основные абстрактные классы символьных потоков:
     - "Reader" — базовый класс для чтения символов.
     - "Writer" — базовый класс для записи символов.

3. Стандартные потоки.
   - Стандартные потоки — это потоки, которые по умолчанию подключены к консоли:
     - 'System.in" — стандартный поток ввода (чаще всего клавиатура).
     - "System.out" — стандартный поток вывода (чаще всего консоль).
     - "System.err" — стандартный поток вывода ошибок.

4. InputStreamReader и OutputStreamWriter.
   - "InputStreamReader" — преобразует байтовый поток в символьный поток, позволяя читать текст из источника байтовых данных.
   - "OutputStreamWriter" — преобразует символьный поток в байтовый, позволяя записывать текстовые данные в источник, который принимает байты.

5. Примеры байтовых и символьных классов потоков.
   - Примеры байтовых потоков:
     - "FileInputStream" — чтение байтов из файла.
     - "FileOutputStream" — запись байтов в файл.
   - Примеры символьных потоков:
     - "FileReader" — чтение символов из файла.
     - "FileWriter" — запись символов в файл.

6. Сериализация объектов. Подготовка классов к сериализации.
   - Сериализация — это процесс преобразования объекта в поток байтов для его последующего сохранения или передачи. Для сериализации класс должен реализовать интерфейс "Serializable".
   - Подготовка к сериализации включает в себя обеспечение того, чтобы все поля объекта могли быть сериализованы, или их нужно пометить как "transient", если они не должны быть сохранены.

7. Порядок сериализации и десериализации. Настройка механизма сериализации.
   - Сериализация происходит с помощью класса "ObjectOutputStream", который записывает объект в поток.
   - Десериализация — это восстановление объекта из потока байтов, происходит с помощью класса "ObjectInputStream".
   - Механизм сериализации можно настроить, например, с помощью методов "writeObject" и "readObject" для управления процессом записи/чтения объектов.

8. Контроль версий объектов.
   - Для контроля версий объектов используется поле "serialVersionUID". Оно позволяет избежать проблем при десериализации, если версия класса изменилась.